// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AvatarAnimal {
  CAT
  DOG
  RABBIT
}

enum AvatarColor {
  PRIMARY
  SECONDARY
  TERTIARY
}

enum ChallengeType {
  LAST_TO_COMPLETE
  NOT_COMPLETED
}

model User {
  userId                String        @id @default(uuid())
  email                 String        @unique
  username              String?       @unique
  name                  String?
  cfg_deadline_reminder Boolean       @default(true)
  cfg_invites_notif     Boolean       @default(true)
  avatar_animal         AvatarAnimal?
  avatar_color          AvatarColor?
  avatar_bg             String?
  owner_of              Challenge[]
  participating_in      Participant[]
  contacts_pers1        Contact[]     @relation("contacts_pers1")
  contacts_pers2        Contact[]     @relation("contacts_pers2")
}

model Challenge {
  challengeId  String        @id @default(uuid())
  title        String
  description  String?
  startAt      DateTime?
  endAt        DateTime
  type         ChallengeType
  ownerId      String
  owner        User          @relation(fields: [ownerId], references: [userId])
  participants Participant[]
}

model Participant {
  challengeId   String
  challenge     Challenge @relation(fields: [challengeId], references: [challengeId])
  userId        String
  user          User      @relation(fields: [userId], references: [userId])
  invited_at    DateTime  @default(now())
  joined_at     DateTime?
  completed_at  DateTime?
  evidence_link String?

  @@id([challengeId, userId])
}

model Contact {
  pers1_id String
  pers1    User   @relation("contacts_pers1", fields: [pers1_id], references: [userId])
  pers2_id String
  pers2    User   @relation("contacts_pers2", fields: [pers2_id], references: [userId])

  @@id([pers1_id, pers2_id])
}
